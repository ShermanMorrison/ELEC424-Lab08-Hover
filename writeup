Lab08: Hover
Chase E Stewart, Jonathan Wilson


___Approach___
Final Method
    Our final implementation of hover used a P controller based on the error of the barometer. Due to the change in battery strength, we decided that adding an integral correction would not be useful, because the steady-state error of thrust decreases (becomes weaker) as the battery discharges. Additionally,  in the last lab we found the derivative error was weird at best and certainly not helpful, so we discarded it for this lab. When the althold mode is enabled via the althold button (L2 for us), we sample the barometer immediately, providing a reference value for the automatic pilot (we found the barometer was steady enough for our proportional loop). After this, a loop controller provides proportional feedback based on the error (here defined as the difference between the first-sampled value and the current barometer reading) in order to correct. The function is implemented in AIcontroller in accordance with the ELEC424 assignment page. We opted to not allow the hover mode to be controllable in the althold mode (the assignment mentioned this was optional) in preparation for the competition next week.

Attempts
    We also tried using the ASL data as input, but we found that the frequency at which it updated was too slow to usefully correct the thrust. As stated above, we found that adding an integral correction would not be useful, because the steady-state error of thrust decreases (becomes weaker) as the battery discharges. At first, we thought to do PID control and to do some sort of sensor fusion ourselves, but it turned out that the barometer was accurate enough for our tastes, and as we described above, the I and D portions were not extremely helpful. We managed to break our crazyflie's propellor  on a flight that went up and up and up, causing us to write code that sets a maximum allowable height before forcing the crazyflie down (a very good fix for us).

___Source Files Modified___

FlightTab.py:
    Added a setter method to set the barometer value in aicontroller.py, 
similar to the ones that set the roll, pitch, and yaw from the last lab.
    Also added a setter for the ASL data, but this is deprecated now as we did not like the results of testing with this data as much.

aicontroller.py:
    Added a getter method to get barometer value.
    Added a handler and control logic for the pressing of the althold button, so that it will call the function when althold is toggled on, and will enable the first-time flag the first time read input comes through and althold is enabled (the first-time flag is then disabled as soon as althold is toggled off)
    Wrote altHoldThrust to proportionally control thrust- this is the heart of the althold function. It implements proportional control and runs instead of the other thrust function "augmentInputWithAi" when BOTH AI and altHold are enabled (althold is a sub-state of aicontroller). This function sets the thrust delta for the crazyflie based on a simple proportional loop control; the formula is:


    error = altHoldTarget - barometer_reading
    thrustDelta = hoverBaseThrust + hoverRatio * error
    self.addThrust(thrustDelta)

where hoverBaseThrust and hoverRatio are constants- ratio is the tightness of correction and baseThrust is roughly the amount of thrust to hold the crazyflie in place

and where altHoldTarget is the value of the barometer when the mode is fist started.



___Sensors Used___

    Barometer - P control based on barometer's ADC values which are linear w.r.t. height according to datasheet (ADC value based on pressure in millibars).
    Accelerometer - used for PID control in yaw, pitch, roll, fused with gyroscope for accuracy
    Gyroscope - used for PID control in yaw, pitch, roll, fused with accelerometer for accuracy
            
___Contribution___

Jonathan Wilson - 50%
Chase E. Stewart - 50%
